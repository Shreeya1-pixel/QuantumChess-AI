import { Chess } from 'chess.js'
import { MoveAnalysis } from '../types/chess'

export const exportToPGN = (game: Chess, analysisHistory: MoveAnalysis[]): string => {
  const pgn = game.pgn()
  const gameInfo = [
    '[Event "QuantumChess AI Game"]',
    '[Site "QuantumChess AI"]',
    '[Date "' + new Date().toISOString().split('T')[0] + '"]',
    '[Round "1"]',
    '[White "Player"]',
    '[Black "QuantumChess AI"]',
    '[Result "*"]',
    '[Variant "Standard"]',
    '[TimeControl "-"]',
    '[ECO "A00"]',
    '[Opening "Quantum Chess Opening"]',
    '[Annotator "QuantumChess AI"]',
    ''
  ]

  // Add analysis comments to PGN
  let annotatedPGN = pgn
  const moves = game.history({ verbose: true })
  
  analysisHistory.forEach((analysis, index) => {
    if (index < moves.length) {
      const move = moves[index]
      const moveNumber = Math.floor(index / 2) + 1
      // const isWhiteMove = index % 2 === 0
      
      // Create comment with both AI analyses
      const comment = `{Classical AI: ${analysis.classical.move} (${analysis.classical.reason}) | Quantum AI: ${analysis.quantum.move} (${analysis.quantum.concept})}`
      
      // Find the move in PGN and add comment
      const movePattern = new RegExp(`(${moveNumber}\\. ${move.san})`, 'g')
      annotatedPGN = annotatedPGN.replace(movePattern, `$1 ${comment}`)
    }
  })

  return gameInfo.join('\n') + annotatedPGN
}

export const downloadPGN = (pgnContent: string, filename: string = 'quantum-chess-game.pgn'): void => {
  const blob = new Blob([pgnContent], { type: 'application/x-chess-pgn' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  
  URL.revokeObjectURL(url)
}

export const generateGameSummary = (game: Chess, analysisHistory: MoveAnalysis[]): string => {
  const totalMoves = game.history().length
  const classicalWins = analysisHistory.filter(a => a.classical.evaluation > 0.5).length
  const quantumWins = analysisHistory.filter(a => a.quantum.probability > 0.6).length
  
  return `
QuantumChess AI Game Summary

Total Moves: ${totalMoves}
Classical AI Strong Positions: ${classicalWins}
Quantum AI High Confidence Moves: ${quantumWins}

Game Analysis:
- Classical AI focused on material advantage and tactical precision
- Quantum AI explored strategic possibilities and positional harmony
- Both engines provided unique insights into chess strategy

Quantum Concepts Used:
${analysisHistory.map(a => `- ${a.quantum.concept}: ${a.quantum.explanation}`).join('\n')}

Generated by QuantumChess AI
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}
  `.trim()
}
